import os
import logging
import asyncio
import signal
import sys
import traceback
from datetime import datetime
from telegram.ext import Application, PicklePersistence
from telegram import Update
from config import TOKEN, logger
from handlers import setup_handlers
from database.db_manager import DatabaseManager
from dotenv import load_dotenv

# .env dosyasÄ±nÄ± yÃ¼kle
load_dotenv()

# GeliÅŸtirme modunda mÄ±?
DEV_MODE = os.environ.get('DEV_MODE', 'False').lower() == 'true'

# Loglama ayarlarÄ±
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG if DEV_MODE else logging.INFO
)
logger = logging.getLogger(__name__)

# Kapanma olayÄ±
shutdown_event = asyncio.Event()

def signal_handler(sig, frame):
    """Sinyal yakalayÄ±cÄ±"""
    logger.info("Sinyal alÄ±ndÄ±, bot gÃ¼venli bir ÅŸekilde kapatÄ±lÄ±yor...")
    # Event'i asenkron olarak set etmek iÃ§in asyncio.run_coroutine_threadsafe kullanÄ±yoruz
    if asyncio.get_event_loop().is_running():
        shutdown_event.set()
    else:
        # EÄŸer event loop Ã§alÄ±ÅŸmÄ±yorsa, doÄŸrudan Ã§Ä±kÄ±ÅŸ yap
        logger.info("Event loop Ã§alÄ±ÅŸmÄ±yor, doÄŸrudan Ã§Ä±kÄ±ÅŸ yapÄ±lÄ±yor...")
        os._exit(0)

async def main():
    """Bot baÅŸlatma fonksiyonu"""
    app = None
    try:
        # VeritabanÄ± baÄŸlantÄ±sÄ± ve kurulumu
        logger.info("VeritabanÄ± kurulumu baÅŸlatÄ±lÄ±yor...")
        print("VeritabanÄ± kurulumu baÅŸlatÄ±lÄ±yor...")
        
        # VeritabanÄ± URL'sini kontrol et
        db_url = os.getenv('DATABASE_URL')
        logger.info(f"VeritabanÄ± URL: {db_url}")
        print(f"VeritabanÄ± URL: {db_url}")
        
        db_manager = DatabaseManager()
        setup_success = db_manager.setup_database()
        
        if not setup_success:
            logger.error("VeritabanÄ± kurulumu baÅŸarÄ±sÄ±z oldu!")
            print("VeritabanÄ± kurulumu baÅŸarÄ±sÄ±z oldu!")
            return
        
        logger.info("VeritabanÄ± kurulumu tamamlandÄ±.")
        
        # GeliÅŸtirme modunda ise, hot-reload iÃ§in bilgi mesajÄ±
        if DEV_MODE:
            logger.info("GeliÅŸtirme modu aktif! Kod deÄŸiÅŸiklikleri iÃ§in Docker volume mapping kullanÄ±lÄ±yor.")
        
        # Persistence'Ä± yapÄ±landÄ±r
        persistence = PicklePersistence(
            filepath="bot_data.pickle",
            single_file=True,
            update_interval=60
        )
        
        # Bot uygulamasÄ±nÄ± oluÅŸtur
        app = Application.builder()\
            .token(os.environ.get("BOT_TOKEN"))\
            .persistence(persistence)\
            .concurrent_updates(True)\
            .arbitrary_callback_data(True)\
            .build()
        
        # Handler'larÄ± ayarla
        setup_handlers(app)
        
        # Botu baÅŸlat
        logger.info("Bot baÅŸlatÄ±lÄ±yor...")
        await app.initialize()
        await app.start()
        
        # Polling baÅŸlat
        logger.info("Bot polling baÅŸlatÄ±lÄ±yor...")
        await app.updater.start_polling(
            allowed_updates=[
                Update.MESSAGE,
                Update.EDITED_MESSAGE,
                Update.CHANNEL_POST,
                Update.EDITED_CHANNEL_POST,
                Update.CALLBACK_QUERY
            ],
            drop_pending_updates=False,
            timeout=30,
            read_timeout=30,
            write_timeout=30,
            connect_timeout=30,
            pool_timeout=30
        )
        
        logger.info("ğŸš€ Bot baÅŸarÄ±yla baÅŸlatÄ±ldÄ±!")
        
        # Botu Ã§alÄ±ÅŸÄ±r durumda tut, shutdown_event bekle
        await shutdown_event.wait()
        
        # Shutdown_event tetiklendiÄŸinde buraya gelir
        logger.info("ğŸ›‘ Bot gÃ¼venli bir ÅŸekilde kapatÄ±lÄ±yor...")
        
    except Exception as e:
        logger.error(f"Bot baÅŸlatma hatasÄ±: {str(e)}")
        print(f"Bot baÅŸlatma hatasÄ±: {str(e)}")
    finally:
        # Botu kapat
        if app is not None:
            try:
                logger.info("Bot servisleri kapatÄ±lÄ±yor...")
                await app.updater.stop()
                await app.stop()
                # app.shutdown() metodu kaldÄ±rÄ±ldÄ±
            except Exception as e:
                logger.error(f"Bot kapatma hatasÄ±: {str(e)}")
        
        logger.info("ğŸ”š Bot baÅŸarÄ±yla kapatÄ±ldÄ±!")

if __name__ == "__main__":
    # Sinyal handler'larÄ± ayarla
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # Bot'u baÅŸlat
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Klavye kesintisi algÄ±landÄ±, Ã§Ä±kÄ±ÅŸ yapÄ±lÄ±yor...")
    except Exception as e:
        logger.error(f"Beklenmeyen hata: {str(e)}")
        print(f"Beklenmeyen hata: {str(e)}") 