# Production ortamı için Docker Compose yapılandırması
# Son güncelleme: 2025-01-24 - Veritabanı yapılandırması güncellendi

x-db-environment: &db-environment
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: kingsm
  LANG: en_US.utf8
  LC_COLLATE: en_US.utf8
  LC_CTYPE: en_US.utf8

x-service-environment: &service-environment
  DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/kingsm
  DB_HOST: db
  DB_PORT: 5432
  DB_SSLMODE: disable

x-logging: &logging_config
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

services:
  bot:
    image: registry.digitalocean.com/kingsm/bot:latest
    container_name: kingsm_bot
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
      LOG_LEVEL: debug
      <<: *service-environment
    command: >
      /bin/sh -c "
      python -m uvicorn bot.server:app --host 0.0.0.0 --port 8001 --log-level debug &
      python -m bot.main
      "
    restart: unless-stopped
    networks:
      kingsm_network:
        aliases:
          - bot
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s
    <<: *logging_config

  api:
    image: registry.digitalocean.com/kingsm/api:latest
    container_name: kingsm_api
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
      LOGGING_LEVEL: info
      LOG_LEVEL: debug
      DB_CONNECT_RETRY: "20"
      DB_CONNECT_INTERVAL: "5"
      <<: *service-environment
    volumes:
      - ./logs:/app/logs
    command: >
      /bin/sh -c '
      echo "Log dizini hazırlanıyor..." &&
      mkdir -p /app/logs &&
      chmod -R 777 /app/logs &&
      echo "Veritabanı hazır olana kadar bekleniyor..." &&
      until pg_isready -h db -U postgres -q; do
        echo "Veritabanı bağlantısı bekleniyor..."
        sleep 5
      done &&
      echo "Veritabanı hazır, bağlantı için 20 saniye daha bekleniyor..." &&
      sleep 20 &&
      echo "Veritabanı hazır!" &&
      echo "API servisi başlatılıyor..." &&
      export SQLALCHEMY_ECHO=0 &&
      uvicorn app.core.app:app --host 0.0.0.0 --port 8000 --log-level debug --no-access-log'
    restart: unless-stopped
    networks:
      kingsm_network:
        aliases:
          - api
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 120s
    <<: *logging_config

  db:
    image: postgres:15
    container_name: kingsm_db
    ports:
      - "5432:5432"
    environment:
      <<: *db-environment
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    networks:
      - kingsm_network
    <<: *logging_config

  nginx:
    image: nginx:latest
    container_name: kingsm_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/portainer.conf:/etc/nginx/conf.d/portainer.conf
      - /root/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - portainer
      - portainer_agent
    restart: unless-stopped
    networks:
      - kingsm_network

  # Portainer - Docker konteyner yönetim arayüzü
  # Web arayüzü port 9000'den erişilebilir
  portainer:
    image: portainer/portainer-ce:latest
    container_name: kingsm_portainer
    restart: always
    security_opt:
      - no-new-privileges:true
    ports:
      - "9000:9000"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - kingsm_network

  # Portainer Agent - Uzaktan Docker yönetimi için gerekli
  # Agent port 9001'den iletişim kurar
  portainer_agent:
    image: portainer/agent:2.21.5
    container_name: kingsm_portainer_agent
    restart: always
    ports:
      - "9001:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
      - /:/host
    networks:
      - kingsm_network

networks:
  kingsm_network:
    name: kingsm_network
    driver: bridge

volumes:
  postgres_data:
    external: true
    name: kingsm_postgres_data
  # Portainer verilerinin kalıcı depolanması için volume
  portainer_data:
    driver: local
